java设计模式
    1.模板设计模式
        定义一个操作中算法的骨架， 而将一些步骤延迟到子类中，模板设计模式使得子类可以不改变算法的某些特定的步骤。

        定一个抽象类作为模板，定义抽象的方法约束必要步骤。子类与要用到模板，必须继承该类，并具体实现方法。

        优点：
            1.具体细节步骤实现定义在子类中， 子类定义详细处理算法是不会改变算法的整体结构；
            2.代码服用的基本技术，在数据库设计中十分重要；
            3.存在一种返乡的控制结构，通过一个父类调用其子类的操作，通过子类对父类进行增加扩展增加新的行为，符合“开闭原则”

        缺点：每个不同的实现都需要定义一个子类，会导致类的个数增加，系统更加旁大。

    2.装饰器设计模式
        装饰器设计模式:增强一个类的功能,而且还可以让这些装饰类互相装饰.

        增强一个类的功能时我们可以选择继承:
            通过继承实现增强一个类的功能有点:代码结构清晰,通俗易懂.
            缺点:是永不灵活,会导致继承的体系过于庞大.

        装饰器设计模式的实现步骤:
            1.在装饰类的内部维护一个被装饰类的引用.
            2.让装饰类都有一个共同的父类或父接口.

    3.单例设计模式

        实现步骤：
            1.将类的构造方法私有化，不让外界调用；
            2.自己内部初始化类；
            3.对外提供获取对象的方法。

        单例设计模式作用：
            1.控制资源的使用，通过线程同步来控制资源的并发访问；
            2.控制实例产生的数量，达到节约资源的目的；
            3.作为通信媒介使用，也就是数据共享，他可以在不建立直接关联的条件下，让多个不想相关的两个线程或者进程之间实现通信

        但理模式使用的场景：
            1.系统只需要一个实例对象，入系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗太大而只允许创建一个对象。
            2.客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。

        单例模式的优缺点：
            优点：
                1.提供了对唯一实例的受控访问。
                2.由于在系统内存中只存在一个对象，可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。
                3.允许可变数目的实例。
            缺点：
                1.由于单利模式中没有抽象层，因此单例类的扩展有很大的困难；
                2.单例类的职责过重，在一定程度上违背了“单一职责原则”；
                3.滥用单例将带来一些负面的问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现
                    连接池溢出，如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。

    4.观察者设计模式
        观察者模式提供了一种对象设计,让主题和观察者之间耦合度降得很低,为什么呢?关于观察者的一切,主题只知道观察者实现了Observer接口,并不需要观察者具体的类是谁,做了什么或者其他细节.

        　　这样的话,由于松耦合,改变主题或者观察者其中一方,并不会影响另一方,只要他们之间的接口仍被遵守,就可以自由地改变它.

        　　降低对象之间的耦合度,也是面设对象设计的一个很重要的原则.　

    5.工厂设计模式
        利用反射技术创建对象